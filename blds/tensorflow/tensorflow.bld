#package name
NAME=tensorflow

#Description
DESC="Computation using data flow graphs for scalable machine learning"

#package version
VERSION=1.14.0

#directory locations, 99.99% of the time this is 1
ISUSR=1

#source location (used by wget)
SRC=https://github.com/tensorflow/tensorflow/archive/v${VERSION}.tar.gz

#extra parameters to pass to configure (if not ISSPECIAL)
EXTRACONF=

#autotools, python, perl, cmake, custom
BUILD=custom

# build/package dependancies
DEPS=('python-numpy' 'gcc-libs' 'glibc' 'lib32-glibc' 'nccl' 'python')

# 'no' to skip calls to strip
STRIP=

#array of deps to add to package (ones that are not automatically picked up by pkgr)
PKGDEPS=('python-numpy')

#1 to restore libdb to what it was before pkgr -genmeta is called ( ie. ignore libs )
RESTORELIBDB=

#NOTE: If you're using GCC 7 with CUDA please see this: https://carterturn.com/h/Guides/NVIDIA%20CUDA%209.1%20with%20GCC%207.2

function BuildAndInstall
{
    #build deps
    for i in bazel python-wheel; do
        pkgr -i $i;
    done

    mkdir -p out

    if [ -z "$BLDR_DIST" ]; then
        export CC_OPT_FLAGS='-march=haswell'
    else
        export CC_OPT_FLAGS='-march=native'
    fi
    export PYTHON_BIN_PATH=/usr/bin/python3
    export USE_DEFAULT_PYTHON_LIB_PATH=1
    export TF_NEED_JEMALLOC=1
    export TF_NEED_KAFKA=0
    export TF_NEED_OPENCL_SYCL=0
    export TF_NEED_AWS=0
    export TF_NEED_GCP=0
    export TF_NEED_HDFS=0
    export TF_NEED_S3=0
    export TF_ENABLE_XLA=1
    export TF_NEED_GDR=0
    export TF_NEED_VERBS=0
    export TF_NEED_OPENCL=0
    export TF_NEED_MPI=0
    export TF_NEED_TENSORRT=0
    export TF_NEED_NGRAPH=0
    export TF_NEED_IGNITE=0
    export TF_NEED_ROCM=0
    export TF_SET_ANDROID_WORKSPACE=0
    export TF_DOWNLOAD_CLANG=0
    export TF_IGNORE_MAX_BAZEL_VERSION=1
    export GCC_HOST_COMPILER_PATH=/usr/bin/gcc
    export HOST_CXX_COMPILER_PATH=/usr/bin/gcc
    
	if [ ! -e /opt/cuda ]; then
	    export TF_NEED_CUDA=0
		./configure
		bazel build --config=opt //tensorflow/tools/pip_package:build_pip_package
	else
        export NCCL_INSTALL_PATH=/usr
        export TF_NCCL_VERSION=2.4
        export TF_CUDA_CLANG=0  # Clang currently disabled because it's not compatible at the moment.
        export CLANG_CUDA_COMPILER_PATH=/usr/bin/clang
        export TF_CUDA_PATHS=/opt/cuda,/usr/lib,/usr
        export TF_CUDA_VERSION=$(/opt/cuda/bin/nvcc --version | sed -n 's/^.*release \(.*\),.*/\1/p')
        export TF_CUDNN_VERSION=$(sed -n 's/^#define CUDNN_MAJOR\s*\(.*\).*/\1/p' /usr/include/cudnn.h)
        export TF_CUDA_COMPUTE_CAPABILITIES=3.5,3.7,5.0,5.2,5.3,6.0,6.1,6.2,7.0,7.2,7.5
	    export TF_NEED_CUDA=1
		./configure
        bazel build --config=opt --config=cuda --incompatible_no_support_tools_in_action_inputs=false \
                  //tensorflow:libtensorflow.so \
                  //tensorflow:libtensorflow_cc.so \
                  //tensorflow:install_headers \
                  //tensorflow/tools/pip_package:build_pip_package
	fi

	bazel-bin/tensorflow/tools/pip_package/build_pip_package `pwd`/out
	pip3 install -I --root=/root/bldr-inst ./out/*.whl
}

#Default HTTP curl new version detection
function Detect
{
        LATEST=`curl -L -s https://github.com/tensorflow/tensorflow/releases | egrep "v[0-9\.]+\.tar\.gz" | head -n1 | sed -e 's/.*v\([0-9\.]*\)\.tar\.gz.*/\1/g'`
        
    vercomp $VERSION $LATEST
        if [ $? -eq 2 ];
        then
                        echo "$NAME: New Version Available! - $LATEST"
        fi
}
