#package name
NAME=cuda

#Description
DESC="NVIDIA's GPU programming toolkit"

#package version
VERSION=9.1.85.2

#directory locations, 99.99% of the time this is 1
ISUSR=1

#source location (used by wget)
SRC=

#extra parameters to pass to configure (if not ISSPECIAL)
EXTRACONF=

#autotools, python, perl, cmake, custom
BUILD=custom

# build/package dependancies
DEPS=

# 'no' to skip calls to strip
STRIP=

#array of deps to add to package (ones that are not automatically picked up by pkgr)
PKGDEPS=

#1 to restore libdb to what it was before pkgr -genmeta is called ( ie. ignore libs )
RESTORELIBDB=1

function BuildAndInstall
{
    if [ ! -e cuda_${VERSION:0:6}_387.26_linux ]; then
        wget https://developer.nvidia.com/compute/cuda/9.1/Prod/local_installers/cuda_${VERSION:0:6}_387.26_linux
    fi

    if [ ! -e cuda_9.1.85.1_linux ]; then
        wget https://developer.nvidia.com/compute/cuda/9.1/Prod/patches/1/cuda_9.1.85.1_linux
    fi

    if [ ! -e cuda_9.1.85.2_linux ]; then
        wget https://developer.nvidia.com/compute/cuda/9.1/Prod/patches/2/cuda_9.1.85.2_linux
    fi

    sh cuda_${VERSION:0:6}_387.26_linux --extract=`pwd` --override
    ./cuda-*.run --noexec --keep
    ./cuda-samples*.run --noexec --keep

# 1rd sed line: sets right path to install man files
# 2rd sed line: hack to lie installer, now detect launch script by root
# 3rd sed line: sets right path in .desktop files and other .desktop stuff (warnings by desktop-file-validate)
    sed -e "s|/usr/share|/root/bldr-tmp/pkg/cuda/usr/share|g" \
      -e 's|can_add_for_all_users;|1;|g' \
      -e 's|=\\"$prefix\\\"|=/opt/cuda|g' -e 's|Terminal=No|Terminal=false|g' -e 's|ParallelComputing|ParallelComputing;|g' \
      -i pkg/install-linux.pl

# set right path in Samples Makefiles
    sed 's|\$cudaprefix\\|\\/opt\\/cuda\\|g' -i pkg/install-sdk-linux.pl

# use python2
    find pkg -name '*.py' | xargs sed -i -e 's|env python|env python2|g' -e 's|bin/python|bin/python2|g'

# Fix up samples tht use findgllib_mk
    for f in pkg/samples/*/*/findgllib.mk; do
        patch $f $BLDRTMPDIR/cuda-findgllib_mk.diff
    done
    rm $BLDRTMPDIR/cuda-findgllib_mk.diff

    cd pkg
    export PERL5LIB=.
    perl install-linux.pl -prefix="/root/bldr-inst/opt/cuda" -noprompt
    perl install-sdk-linux.pl -cudaprefix="/root/bldr-inst/opt/cuda" -prefix="/root/bldr-inst/opt/cuda/samples" -noprompt
    sh ../cuda_9.1.85.1_linux --silent --accept-eula --installdir=/root/bldr-inst/opt/cuda
    sh ../cuda_9.1.85.2_linux --silent --accept-eula --installdir=/root/bldr-inst/opt/cuda

# Hack we need because of glibc 2.26 (https://bugs.archlinux.org/task/55580)
# without which we couldn't compile anything at all.
# Super dirty hack. I really hope it doesn't break other stuff!
# Hopefully we can remove this for later version of cuda.
    sed -i "1 i#define _BITS_FLOATN_H" /root/bldr-inst/opt/cuda/include/host_defines.h

# Install profile and ld.so.config files
    mkdir -p /root/bldr-inst/etc/{profile.d,ld.so.conf.d}
    mv ${BLDRTMPDIR}/cuda.sh /root/bldr-inst/etc/profile.d/cuda.sh
    mv ${BLDRTMPDIR}/cuda.conf /root/bldr-inst/etc/ld.so.conf.d/cuda.conf

# Remove redundant man and samples
    rm -fr /root/bldr-inst/opt/cuda/doc/man
    rm -fr /root/bldr-inst/opt/cuda/cuda-samples
    rm -fr /root/bldr-inst/usr/share/man/man3/deprecated.3*

# Remove included copy of java and link to system java
    rm -fr  /root/bldr-inst/opt/cuda/jre
    sed 's|../jre/bin/java|/usr/bin/java|g' \
    -i /root/bldr-inst/opt/cuda/libnsight/nsight.ini \
    -i /root/bldr-inst/opt/cuda/libnvvp/nvvp.ini

# Remove unused files
    rm -fr /root/bldr-inst/opt/cuda/{bin,samples}/.uninstall_manifest_do_not_delete.txt
    rm -fr /root/bldr-inst/opt/cuda/samples/uninstall_cuda_samples_8.0.pl
    rm -fr /root/bldr-inst/opt/cuda/bin/cuda-install-samples-8.0.sh
    rm -fr /root/bldr-inst/opt/cuda/bin/uninstall_cuda_toolkit_8.0.pl

}

function Detect() {
    LISTURL=
    FILELIST=`GetFileList`
    LATEST=0

    for i in ${FILELIST[@]};
    do
        CURVER=`echo $i | sed -e 's/'"${NAME}"'-//g; s/.tar.*//g'`
        vercomp $LATEST $CURVER
        if [ $? -eq 2 ];
        then
                        LATEST=$CURVER
        fi
    done

    vercomp $VERSION $LATEST
    if [ $? -eq 2 ];
    then
        echo "$NAME: New Version Available! - $LATEST"
    fi
}
