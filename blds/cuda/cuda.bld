#package name
NAME=cuda

#Description
DESC="NVIDIA's GPU programming toolkit"

#package version
VERSION=10.1.168_418.67
VERSION2=10.1.105_418.39

#directory locations, 99.99% of the time this is 1
ISUSR=1

#source location (used by wget)
SRC=

#extra parameters to pass to configure (if not ISSPECIAL)
EXTRACONF=

#autotools, python, perl, cmake, custom
BUILD=custom

# build/package dependancies
DEPS=('alsa-lib' 'dbus' 'expat' 'fontconfig' 'freeglut' 'freetype2' 'gcc-libs' 'glib2' 'glibc' 'hyphen' 'lib32-glibc' 'lib32-ncurses' 'libICE' 'libSM' 'libX11' 'libXcomposite' 'libXcursor' 'libXdamage' 'libXext' 'libXfixes' 'libXi' 'libXrandr' 'libXrender' 'libXtst' 'libglu' 'libglvnd' 'libjpeg' 'libxcb' 'libxml2' 'nspr' 'nss' 'openssl1.0' 'protobuf' 'pulseaudio' 'qt' 'qt-webkit' 'sqlite' 'zlib')

# 'no' to skip calls to strip
STRIP=

#array of deps to add to package (ones that are not automatically picked up by pkgr)
PKGDEPS=

#1 to restore libdb to what it was before pkgr -genmeta is called ( ie. ignore libs )
RESTORELIBDB=1

function BuildAndInstall
{
    if [ -z "$BLDR_CONTINUE" ]; then
        if [ ! -e cuda_${VERSION}_linux.run ]; then
            wget https://developer.nvidia.com/compute/cuda/${VERSION:0:4}/Prod/local_installers/cuda_${VERSION}_linux.run
        fi

        if [ ! -e cuda_${VERSION2}_linux.run ]; then
            wget https://developer.nvidia.com/compute/cuda/${VERSION:0:4}/Prod/local_installers/cuda_${VERSION2}_linux.run
        fi

    fi
    sh cuda_${VERSION}_linux.run --extract=`pwd` --override
    sh cuda_${VERSION2}_linux.run --extract=`pwd` --override

    for f in cuda-samples/*/*/findgllib.mk; do
        patch $f $BLDRTMPDIR/cuda-findgllib_mk.diff
    done

    mkdir -p /root/bldr-inst/opt/
    cp -r cuda-toolkit /root/bldr-inst/opt/cuda
    cp -r cublas/include/* /root/bldr-inst/opt/cuda/include/
    cp -r cublas/lib64/* /root/bldr-inst/opt/cuda/lib64/
    cp -r cuda-samples /root/bldr-inst/opt/cuda/samples
    ln -s /opt/cuda/targets/x86_64-linux/lib /root/bldr-inst/opt/cuda/lib
    ln -s /opt/cuda/nvvm/lib64 /root/bldr-inst/opt/cuda/nvvm/lib

# Use GCC 8
    ln -s /usr/bin/gcc /root/bldr-inst/opt/cuda/bin/gcc
    ln -s /usr/bin/g++ /root/bldr-inst/opt/cuda/bin/g++

# Create soname links.
# We have to be weird about this since for some reason the ELF SONAME is incorrect or at least partially incorrect for some libs.
# Best we can do is create all symlinks and hope for the best.
# Their installer used to perform this for us but now it's all manual and I think this is what we'll be stuck with for now.
    find cuda-toolkit/targets -type f -name '*.so*' ! -path '*stubs/*' -print0 | while read -rd $'\0' _lib; do
        _base=${_lib%.so.*}
        _current_soname=$(basename ${_lib%.*})
        while [[ $_current_soname != $(basename $_base) ]]; do
          ln -sf ${_lib##*/} /root/bldr-inst/opt/cuda/lib64/$_current_soname
          _current_soname=${_current_soname%.*}
        done
    done

# Install profile and ld.so.config files
    install -Dm755 $BLDRTMPDIR/cuda.sh /root/bldr-inst/etc/profile.d/cuda.sh
    install -Dm644 $BLDRTMPDIR/cuda.conf /root/bldr-inst/etc/ld.so.conf.d/cuda.conf

# Remove included copy of java and link to system java 8
    rm -fr  /root/bldr-inst/opt/cuda/jre
    sed 's|../jre/bin/java|/usr/lib/jvm/java-8-openjdk/jre/bin/java|g' \
        -i /root/bldr-inst/opt/cuda/libnsight/nsight.ini \
        -i /root/bldr-inst/opt/cuda/libnvvp/nvvp.ini

    rm $BLDRTMPDIR/cuda.sh $BLDRTMPDIR/cuda.conf $BLDRTMPDIR/cuda-findgllib_mk.diff
}

function Detect() {
    LISTURL=
    FILELIST=`GetFileList`
    LATEST=0

    for i in ${FILELIST[@]};
    do
        CURVER=`echo $i | sed -e 's/'"${NAME}"'-//g; s/.tar.*//g'`
        vercomp $LATEST $CURVER
        if [ $? -eq 2 ];
        then
                        LATEST=$CURVER
        fi
    done

    vercomp $VERSION $LATEST
    if [ $? -eq 2 ];
    then
        echo "$NAME: New Version Available! - $LATEST"
    fi
}
