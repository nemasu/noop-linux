#!/bin/bash
# NAME
# VERSION
# ISUSR
# SRC
# POST,PRE
# EXTRAFILES
# ISSPECIAL

NAME=chromium

#Description
DESC="The open-source project behind Google Chrome, an attempt at creating a safer, faster, and more stable browser"
DVERSION=56.0.2924.76
VERSION=56.0.2924.76
ISUSR=1
#SRC=http://commondatastorage.googleapis.com/chromium-browser-official/chromium-${VERSION}.tar.bz2
SRC=http://gsdview.appspot.com/chromium-browser-official/chromium-${DVERSION}.tar.xz
EXTRACONF=
BUILD=custom
STRIP="no"
RESTORELIBDB=1
DEPS=('alsa-lib' 'atk' 'cairo' 'cups' 'dbus' 'expat' 'fontconfig' 'freetype2' 'gcc-libs' 'gdk-pixbuf' 'glib2' 'glibc' 'gtk+2' 'libX11' 'libXScrnSaver' 'libXcomposite' 'libXcursor' 'libXdamage' 'libXext' 'libXfixes' 'libXi' 'libXrandr' 'libXrender' 'libXtst' 'libxcb' 'nspr' 'nss' 'pango' 'pulseaudio')


function BuildAndInstall
{

  for i in yasm ninja llvm gperf;
  do
          if [ ! -e /var/noop/installed/$i ]; then
                pkgr -i $i
          fi;
  done
  
  for i in `ls $BLDRTMPDIR/*.arm_patch`;
  do
        if [ "${ARCH}" == "armv6l" ]; then
        patch -Np0 -i $i 
        fi
        rm $i;
  done  
        
  export PKG_CONFIG_PATH=/lib/pkgconfig:/usr/lib/pkgconfig

  # CFLAGS are passed through release_extra_cflags below
  export -n CFLAGS CXXFLAGS

  if [ "${ARCH}" == "armv6l" ]; then

  find . -name "*.gyp" -type f | xargs sed -i -e '/mtune=cortex/d;/march=armv7/d;s/-mfpu=neon//g' 2>/dev/null | true
  sed -i -e '/mthumb/d' ./third_party/ffmpeg/ffmpeg.gyp
  
  export CFLAGS="-march=armv6k -DUSE_EABI_HARDFLOAT $CFLAGS"
 
  #TODO update this for arm build 
  arch_specific_flags="
                -Dtarget_arch=arm \
                -Darmv7=0 \
                -Darmv6=1 \
                -Darm_version=6 \
                -Darm_neon=0 \
                -Darm_fpu=vfp \
                -Darm_thumb=0 \
                -Duse_allocator=none \
                -Darm_float_abi=hard \
                -Dv8_use_arm_eabi_hardfloat=true \
                -Dv8_can_use_vfp_instructions=false \
                -Dv8_can_use_vfp2_instructions=true \
                -Dsysroot= \
                -Dclang=0 \
                -Ddisable_nacl=1"
  fi

  if [ "${ARCH}" == "x86_64" ]; then
         local arch_specific_flags=(
                'is_clang=true'
                'clang_use_chrome_plugins=false'
         )
#'target_arch=x64'
  fi

        # Google API keys (see http://www.chromium.org/developers/how-tos/api-keys)
        # Note: These are for noop Linux use ONLY. For your own distribution, please
        # get your own set of keys. Feel free to contact chromium@nooplinux.org for
        # more information.
        _google_api_key=AIzaSyB9Q6_d-Yce6g1iFO0rLj4N74ANKqWnrNc
        _google_default_client_id=89099530172.apps.googleusercontent.com
        _google_default_client_secret=edER2v0My77GhaBaUcdj7dQQ

   
  local _flags=(
    'clang_use_chrome_plugins=false'
    'symbol_level=0'
    'is_debug=false'
    'fatal_linker_warnings=false'
    'treat_warnings_as_errors=false'
    'fieldtrial_testing_like_official_build=true'
    'remove_webcore_debug_symbols=true'
    'ffmpeg_branding="Chrome"'
    'proprietary_codecs=true'
    'link_pulseaudio=true'
    'linux_use_bundled_binutils=false'
    'use_allocator="none"'
    'use_cups=true'
    'use_gconf=false'
    'use_gnome_keyring=false'
    'use_gold=false'
    'use_gtk3=false'
    'use_kerberos=true'
    'use_pulseaudio=true'
    'use_sysroot=false'
    'enable_hangout_services_extension=true'
    'enable_widevine=true'
    'enable_nacl=true'
    'enable_nacl_nonsfi=true'
    "google_api_key=\"${_google_api_key}\""
    "google_default_client_id=\"${_google_default_client_id}\""
    "google_default_client_secret=\"${_google_default_client_secret}\""
  ) 
  
 if [ "${ARCH}" != "armv6l" ];
  then
        # Prepare NaCL toolchain - this is way easier
        python2 ./build/download_nacl_toolchains.py --packages nacl_x86_newlib,pnacl_newlib,pnacl_translator sync
        python2 ./build/download_nacl_toolchains.py --packages nacl_x86_newlib,pnacl_newlib,pnacl_translator extract
        
        # Build with clang
        mkdir -p third_party/llvm-build/Release+Asserts/bin
        rm -rf third_party/llvm-build/Release+Asserts/bin/*
        ln -s /usr/bin/clang third_party/llvm-build/Release+Asserts/bin/
        ln -s /usr/bin/clang++ third_party/llvm-build/Release+Asserts/bin/
        ln -s /usr/bin/llvm-symbolizer third_party/llvm-build/Release+Asserts/bin/
        # remove unsupported clang option
        sed -i '/-Wno-absolute-value/d' build/common.gypi
  fi

  if [ "${ARCH}" == "armv6l" ];
  then
        # Re-configure bundled ffmpeg.
        pushd third_party/ffmpeg
        chromium/scripts/build_ffmpeg.sh linux arm "${PWD}" config-only
        chromium/scripts/copy_config.sh
        popd
  fi

  # https://groups.google.com/a/chromium.org/d/topic/chromium-packagers/9JX1N2nf4PU/discussion
  touch chrome/test/data/webui/i18n_process_css_test.html

  python2 tools/gn/bootstrap/bootstrap.py --gn-gen-args "${_flags[*]} ${arch_specific_flags[*]}"
  out/Release/gn gen out/Release --args="${_flags[*]} ${arch_specific_flags[*]}" \
      --script-executable=/usr/bin/python2

  if [ "${ARCH}" == "armv6l" ];
  then
        ninja -C out/Release chrome chrome_sandbox
  else
        ninja -C out/Release chrome chrome_sandbox chromedriver widevinecdmadapter
  fi

  install -D out/Release/chrome /root/bldr-inst/usr/lib/chromium/chromium

  install -Dm4755 -o root -g root out/Release/chrome_sandbox \
    /root/bldr-inst/usr/lib/chromium/chrome-sandbox

  cp -a out/Release/{*.pak,*.bin,icudtl.dat} \
     out/Release/locales \
         out/Release/gen/content/content_resources.pak \
         /root/bldr-inst/usr/lib/chromium/

  install -Dm644 out/Release/chrome.1 /root/bldr-inst/usr/share/man/man1/chromium.1
  
  if [ "${ARCH}" != "armv6l" ];
  then

        cp out/Release/nacl_helper{,_bootstrap} out/Release/nacl_irt_*.nexe \
                /root/bldr-inst/usr/lib/chromium/

        install -D out/Release/chromedriver /root/bldr-inst/usr/lib/chromium/chromedriver
        cp out/Release/libwidevinecdmadapter.so /root/bldr-inst/usr/lib/chromium/
        mkdir -p /root/bldr-inst/usr/bin/
        ln -s /usr/lib/chromium/chromedriver /root/bldr-inst/usr/bin/chromedriver

    # Manually strip binaries so that 'nacl_irt_*.nexe' is left intact
        strip /root/bldr-inst/usr/lib/chromium/chromedriver \
        /root/bldr-inst/usr/lib/chromium/nacl_helper{,_bootstrap}

        mkdir -p ../widevine
        pushd ../widevine
        wget https://dl.google.com/linux/deb/pool/main/g/google-chrome-stable/google-chrome-stable_${VERSION}-1_amd64.deb -Ochrome.deb
        ar x chrome.deb
        tar xf data.tar.xz
        cp opt/google/chrome/libwidevinecdm.so /root/bldr-inst/usr/lib/chromium/
        popd
  fi
  
  strip /root/bldr-inst/usr/lib/chromium/{chromium,chrome-sandbox} 

  for size in 22 24 48 64 128 256; do
    install -Dm644 "chrome/app/theme/chromium/product_logo_$size.png" \
      /root/bldr-inst/usr/share/icons/hicolor/${size}x${size}/apps/chromium.png
  done

  for size in 16 32; do
    install -Dm644 "chrome/app/theme/default_100_percent/chromium/product_logo_$size.png" \
      /root/bldr-inst/usr/share/icons/hicolor/${size}x${size}/apps/chromium.png
  done
}

#Default HTTP curl new version detection
function Detect
{
        #This cant be accurate...
        LATEST=`curl -s "https://googlechromereleases.blogspot.jp/search/label/Stable%20updates" | grep "Linux" | grep -E "[0-9\.][0-9\.]*" | head -n1 | sed -e 's/.*\s\([0-9\.]*\)\s.*/\1/g'`

        vercomp $VERSION $LATEST
        if [ $? -eq 2 ];
        then
                        echo "$NAME: New Version Available! - $LATEST"
        fi
}
