#!/bin/bash
# NAME
# VERSION
# ISUSR
# SRC
# POST,PRE
# EXTRAFILES
# ISSPECIAL

NAME=chromium
DVERSION=43.0.2357.134
VERSION=43.0.2357.134
ISUSR=1
#SRC=http://commondatastorage.googleapis.com/chromium-browser-official/chromium-${VERSION}.tar.bz2
SRC=http://gsdview.appspot.com/chromium-browser-official/chromium-${DVERSION}.tar.xz
EXTRACONF=
ISSPECIAL=1
STRIP="no"
RESTORELIBDB=1
DEPS=('alsa-lib' 'cairo' 'cups' 'dbus' 'expat' 'fontconfig' 'freetype2' 'gcc-libs' 'gdk-pixbuf' 'glib2' 'glibc' 'harfbuzz' 'libX11' 'libXScrnSaver' 'libXcomposite' 'libXcursor' 'libXdamage' 'libXext' 'libXfixes' 'libXi' 'libXrandr' 'libXrender' 'libXtst' 'libcap2' 'libevent' 'libjpeg' 'libpng' 'libxml2' 'libxslt' 'nspr' 'nss' 'pango' 'pciutils' 'speech-dispatcher')


#needs ninja, gperf and yasm to build

function BuildAndInstall
{
  
  for i in `ls $BLDRTMPDIR/*.arm_patch`;
  do
	if [ "`uname -m`" == "armv6l" ]; then
    	patch -Np0 -i $i 
	fi
	rm $i;
  done  
	
  export PKG_CONFIG_PATH=/lib/pkgconfig:/usr/lib/pkgconfig

  # CFLAGS are passed through release_extra_cflags below
  export -n CFLAGS CXXFLAGS

  if [ "`uname -m`" == "armv6l" ]; then

  find . -name "*.gyp" -type f | xargs sed -i -e '/mtune=cortex/d;/march=armv7/d;s/-mfpu=neon//g' 2>/dev/null | true
  sed -i -e '/mthumb/d' ./third_party/ffmpeg/ffmpeg.gyp
  
  export CFLAGS="-march=armv6k -DUSE_EABI_HARDFLOAT $CFLAGS"
  
  arch_specific_flags="
		-Dtarget_arch=arm \
		-Darmv7=0 \
		-Darmv6=1 \
		-Darm_version=6 \
		-Darm_neon=0 \
		-Darm_fpu=vfp \
		-Darm_thumb=0 \
		-Duse_allocator=none \
		-Darm_float_abi=hard \
		-Dv8_use_arm_eabi_hardfloat=true \
		-Dv8_can_use_vfp_instructions=false \
		-Dv8_can_use_vfp2_instructions=true \
		-Dsysroot= \
		-Dclang=0 \
		-Ddisable_nacl=1"
  fi

  if [ "`uname -m`" == "x86_64" ]; then
	 arch_specific_flags="
		-Dclang=1 \
		-Dclang_use_chrome_plugins=0 \
		-Dtarget_arch=x64"
  fi

  	# Google API keys (see http://www.chromium.org/developers/how-tos/api-keys)
	# Note: These are for noop Linux use ONLY. For your own distribution, please
	# get your own set of keys. Feel free to contact chromium@nooplinux.org for
	# more information.
	_google_api_key=AIzaSyB9Q6_d-Yce6g1iFO0rLj4N74ANKqWnrNc
	_google_default_client_id=89099530172.apps.googleusercontent.com
	_google_default_client_secret=edER2v0My77GhaBaUcdj7dQQ

    
     options=(
	-Dwerror=
	-Dlinux_use_bundled_gold=0
    -Dlinux_use_bundled_binutils=0
	-Dlinux_use_gold_flags=0
	-Dgoogle_api_key=$_google_api_key 
    -Dgoogle_default_client_id=$_google_default_client_id 
    -Dgoogle_default_client_secret=$_google_default_client_secret 
    -Dlogging_like_official_build=1
	-Dproprietary_codecs=1
	-Dlinux_link_libpci=1 
	-Dlinux_link_libspeechd=1 
	-Dlinux_link_gsettings=1 
    -Dlinux_strip_binary=1 
    -Drelease_extra_cflags="$CFLAGS" 
    -Dproprietary_codecs=1 
    -Duse_system_bzip2=1 
    -Dffmpeg_branding=Chrome 
    -Duse_system_ffmpeg=0 
    -Duse_system_libevent=1 
    -Duse_system_libjpeg=1 
    -Duse_system_libpng=1 
    -Duse_system_libxml=1 
    -Duse_system_ssl=0 
    -Duse_system_yasm=1 
    -Duse_system_zlib=0 
    -Duse_gconf=0
	-Duse_mojo=0
	-Ddisable_fatal_linker_warnings=1
	-Ddisable_glibc=1
    -Ddisable_sse2=1 ${arch_specific_flags})

  # Use Python 2 - this is terrible -_-
  if [ -e /usr/bin/python ];
  then
  	rm /usr/bin/python
  fi
  ln -s /usr/bin/python2 /usr/bin/python

  if [ "`uname -m`" != "armv6l" ];
  then
	# Prepare NaCL toolchain - this is way easier
	python2 ./build/download_nacl_toolchains.py --packages nacl_x86_newlib,pnacl_newlib,pnacl_translator sync
	python2 ./build/download_nacl_toolchains.py --packages nacl_x86_newlib,pnacl_newlib,pnacl_translator extract
	
	# Build with clang
	mkdir -p third_party/llvm-build/Release+Asserts/bin
	rm -rf third_party/llvm-build/Release+Asserts/bin/*
	ln -s /usr/bin/clang third_party/llvm-build/Release+Asserts/bin/
	ln -s /usr/bin/clang++ third_party/llvm-build/Release+Asserts/bin/
	ln -s /usr/bin/llvm-symbolizer third_party/llvm-build/Release+Asserts/bin/
	# remove unsupported clang option
	sed -i '/-Wno-absolute-value/d' build/common.gypi
  fi

  if [ "`uname -m`" == "armv6l" ];
  then
	# Re-configure bundled ffmpeg.
	pushd third_party/ffmpeg
	chromium/scripts/build_ffmpeg.sh linux arm "${PWD}" config-only
	chromium/scripts/copy_config.sh
	popd
  fi

  build/linux/unbundle/replace_gyp_files.py "${options[@]}"
  build/gyp_chromium --depth . "${options[@]}"

  #Bug? Opus has -Wno-#pragma-messages, i think the # is commenting the pragma-messages part out
  sed -i -e '/-Wno-/d' third_party/opus/opus.gyp
  
  if [ "`uname -m`" == "armv6l" ];
  then
  	ninja -C out/Release chrome chrome_sandbox
  else
  	ninja -C out/Release chrome chrome_sandbox chromedriver
  fi

  install -D out/Release/chrome /root/bldr-inst/usr/lib/chromium/chromium

  install -Dm4755 -o root -g root out/Release/chrome_sandbox \
    /root/bldr-inst/usr/lib/chromium/chrome-sandbox


  cp out/Release/{*.pak,*.bin,libffmpegsumo.so} /root/bldr-inst/usr/lib/chromium/
  
  if [ "`uname -m`" != "armv6l" ];
  then
  	install -D out/Release/chromedriver /root/bldr-inst/usr/lib/chromium/chromedriver

  	cp out/Release/nacl_helper{,_bootstrap} out/Release/nacl_irt_*.nexe \
		/root/bldr-inst/usr/lib/chromium/
  
    # Manually strip binaries so that 'nacl_irt_*.nexe' is left intact
	strip /root/bldr-inst/usr/lib/chromium/chromedriver \
    	/root/bldr-inst/usr/lib/chromium/nacl_helper{,_bootstrap}

  	strip --strip-all /root/bldr-inst/usr/lib/chromium/libffmpegsumo.so
  fi

  strip --strip-debug /root/bldr-inst/usr/lib/chromium/{chromium,chrome-sandbox} 
	
  cp -a out/Release/locales out/Release/icudtl.dat /root/bldr-inst/usr/lib/chromium/
 
  if [ -e out/Release/natives_blob.bin ];
  then
  	cp -a out/Release/natives_blob.bin /root/bldr-inst/usr/lib/chromium/
  fi

  if [ -e out/Release/snapshot_blob.bin ];
  then
  	cp -a out/Release/snapshot_blob.bin /root/bldr-inst/usr/lib/chromium/
  fi

  install -Dm644 out/Release/chrome.1 /root/bldr-inst/usr/share/man/man1/chromium.1

  for size in 22 24 48 64 128 256; do
    install -Dm644 "chrome/app/theme/chromium/product_logo_$size.png" \
      /root/bldr-inst/usr/share/icons/hicolor/${size}x${size}/apps/chromium.png
  done

  for size in 16 32; do
    install -Dm644 "chrome/app/theme/default_100_percent/chromium/product_logo_$size.png" \
      /root/bldr-inst/usr/share/icons/hicolor/${size}x${size}/apps/chromium.png
  done

  mkdir -p /root/bldr-inst/usr/bin/
  if [ "`uname -m`" != "armv6l" ];
  then
  	ln -s /usr/lib/chromium/chromedriver /root/bldr-inst/usr/bin/chromedriver
  fi
}

#Default HTTP curl new version detection
function Detect
{
	#This cant be accurate...
	LATEST=`curl -s "http://googlechromereleases.blogspot.jp/search/label/Stable%20updates" | grep "Linux" | grep -E "[0-9\.][0-9\.]*" | head -n1 | sed -e 's/.*\s\([0-9\.]*\)\s.*/\1/g'`

	vercomp $VERSION $LATEST
	if [ $? -eq 2 ];
	then
			echo "$NAME: New Version Available! - $LATEST"
	fi
}
