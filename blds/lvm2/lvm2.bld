#package name
NAME=lvm2

#Description
DESC="Just-in-time compiler and drop-in replacement for Lua 5.1"

#package version
VERSION=2.2.02.138

#directory locations, 99.99% of the time this is 1
ISUSR=1

#source location (used by wget)
SRC=ftp://sources.redhat.com/pub/lvm2/LVM${VERSION}.tgz

#extra parameters to pass to configure (if not ISSPECIAL)
EXTRACONF=

#1 if BuildAndInstall should be called instead of ./configure && make && make install method
ISSPECIAL=1

# build/package dependancies
DEPS=('glibc' 'ncurses' 'readline' 'systemd' 'util-linux')

# 'no' to skip calls to strip
STRIP=

#array of deps to add to package (ones that are not automatically picked up by pkgr)
PKGDEPS=

#1 to restore libdb to what it was before pkgr -genmeta is called ( ie. ignore libs )
RESTORELIBDB=

export PKG_CONFIG_PATH=/lib/pkgconfig:/usr/lib/pkgconfig
function BuildAndInstall
{
	autoreconf -fi 
	sed -i 's|use_lvmetad = 0|use_lvmetad = 1|' conf/example.conf.in

	./configure --prefix=/usr --sysconfdir=/etc --localstatedir=/var --sbindir=/usr/bin \
      --with-udev-prefix=/usr --with-systemdsystemunitdir=/usr/lib/systemd/system \
      --with-default-pid-dir=/run --with-default-dm-run-dir=/run --with-default-run-dir=/run/lvm \
      --enable-pkgconfig --enable-readline --enable-dmeventd --enable-cmdlib --enable-applib \
      --enable-udev_sync --enable-udev_rules --with-default-locking-dir=/run/lock/lvm \
      --enable-lvmetad --with-thin=internal --with-cache=internal --enable-udev-systemd-background-jobs


	CFLAGS="-pthread" make -j${BLDR_CORES}
	make DESTDIR=/root/bldr-inst install_device-mapper install_lvm2 install_systemd_units install_systemd_generators
	make -C liblvm DESTDIR=/root/bldr-inst install
}

#Default HTTP curl new version detection
function Detect
{
	FILELIST=`curl -s -L ftp://sources.redhat.com/pub/lvm2/ | sed '/asc/d' | egrep "LVM[0-9\.]*\.tgz" | awk '{print $9;}' | sed 's/LVM//g;s/\.tgz//g'`
	LATEST=0

	for i in ${FILELIST[@]};
	do
		CURVER=$i
		vercomp $LATEST $CURVER
		if [ $? -eq 2 ];
		then
			LATEST=$CURVER
		fi
	done

	vercomp $VERSION $LATEST
	if [ $? -eq 2 ];
	then
		echo "$NAME: New Version Available! - $LATEST"
	fi
}

