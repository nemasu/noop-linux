#package name
NAME=k3b

#Description
DESC="Feature-rich and easy to handle CD burning application"

#package version
VERSION=18.08.2
DVERSION=18.08.2

#directory locations, 99.99% of the time this is 1
ISUSR=1

#source location (used by wget)
SRC=https://download.kde.org/stable/applications/$VERSION/src/k3b-$VERSION.tar.xz

#extra parameters to pass to configure (if not ISSPECIAL)
EXTRACONF=

#1 if BuildAndInstall should be called instead of ./configure && make && make install method
BUILD=custom

# build/package dependancies
DEPS=('attica' 'ffmpeg' 'flac' 'gcc-libs' 'glibc' 'karchive' 'kauth' 'kbookmarks' 'kcmutils' 'kcodecs' 'kcompletion' 'kconfig' 'kconfigwidgets' 'kcoreaddons' 'kfilemetadata' 'ki18n' 'kiconthemes' 'kio' 'kitemviews' 'kjobwidgets' 'knewstuff' 'knotifications' 'knotifyconfig' 'kservice' 'kwidgetsaddons' 'kxmlgui' 'lame' 'libdvdread' 'libkcddb' 'libmad' 'libmpcdec' 'libogg' 'libsamplerate' 'libsndfile' 'libvorbis' 'qt' 'qt-webkit' 'solid' 'taglib')

# 'no' to skip calls to strip
STRIP=

#array of deps to add to package (ones that are not automatically picked up by pkgr)
PKGDEPS=

#1 to restore libdb to what it was before pkgr -genmeta is called ( ie. ignore libs )
RESTORELIBDB=

function BuildAndInstall
{
        sed -e "s|^cmake_minimum_required|#cmake_minimum_required|" -i CMakeLists.txt

        mkdir build && cd build
        cmake .. \
                -DCMAKE_INSTALL_PREFIX=/usr \
                -DCMAKE_BUILD_TYPE=Release
        make -j${BLDR_CORES}

        make DESTDIR=/root/bldr-inst install
}

#Default HTTP curl new version detection
function Detect
{
        LISTURL=http://download.kde.org/stable/k3b/
        FILELIST=`GetFileList`
        LATEST=0

        for i in ${FILELIST[@]};
        do
                        CURVER=`echo $i | sed -e 's/'"${NAME}"'-//g; s/.tar.*//g'`
                        vercomp $LATEST $CURVER
                        if [ $? -eq 2 ];
                        then
                                        LATEST=$CURVER
                        fi
        done

        vercomp $VERSION $LATEST
        if [ $? -eq 2 ];
        then
                        echo "$NAME: New Version Available! - $LATEST"
        fi
}

