NAME=nvidia390xx

#Description
DESC="NVIDIA 390.xx legacy drivers for linux"
VERSION=390.87
DVERSION=390.87
ISUSR=1

if [ "${ARCH}" == "x86_64" ];
then
        SSRC=http://download.nvidia.com/XFree86/Linux-x86_64/${DVERSION}/NVIDIA-Linux-x86_64-${DVERSION}.run
        PKGDEPS=('mesalib' 'lib32-mesalib' 'xorg-server')
else
        SSRC=http://download.nvidia.com/XFree86/Linux-x86/${DVERSION}/NVIDIA-Linux-x86-${DVERSION}.run
        PKGDEPS=('mesalib' 'xorg-server')
fi

SRC=
EXTRACONF=
BUILD=custom
DEPS=('xorg-server' 'atk' 'cairo' 'gdk-pixbuf' 'glib2' 'glibc' 'gtk+' 'gtk+2' 'lib32-glibc' 'lib32-libX11' 'lib32-libXext' 'lib32-mesalib' 'libX11' 'libXext' 'mesalib' 'pango' 'wayland')
STRIP="no"
RESTORELIBDB=1

#The way this works is that it will backup mesa's opengl library and xorg-server's libglx library
#nvidia package cannot be installed without mesa/xorg-server, and mesa/xorg-server cannot be removed before nvidia

function BuildAndInstall
{
	if [ -z "$BLDR_CONTINUE" ]; then
		wget $SSRC -Oout
		sh ./out --extract-only
		rm out
		cd `ls`
		tar xf nvidia-persistenced-init.tar.bz2
		cd ..
	fi
	cd `ls`

	#Module
	pushd kernel
	make SYSSRC=/lib/modules/`uname -r`/build module
	mkdir -p /root/bldr-inst/lib/modules/`uname -r`/misc/
	cp -v *.ko /root/bldr-inst/lib/modules/`uname -r`/misc/
	popd

	#libs
	mkdir -p /root/bldr-inst/usr/lib/nvidia

# OpenCL
    install -D -m644 nvidia.icd /root/bldr-inst/etc/OpenCL/vendors/nvidia.icd
    install -D -m755 libnvidia-compiler.so.${VERSION} /root/bldr-inst/usr/lib/libnvidia-compiler.so.${VERSION}
    install -D -m755 libnvidia-opencl.so.${VERSION} /root/bldr-inst/usr/lib/libnvidia-opencl.so.${VERSION}

# X driver
	install -D -m755 nvidia_drv.so /root/bldr-inst/usr/lib/xorg/modules/drivers/nvidia_drv.so

# GLX extension module for X
	install -D -m755 libglx.so.${VERSION} /root/bldr-inst/usr/lib/nvidia/xorg/libglx.so.${VERSION}
	ln -s libglx.so.${VERSION} /root/bldr-inst/usr/lib/nvidia/xorg/libglx.so.1
	ln -s libglx.so.${VERSION} /root/bldr-inst/usr/lib/nvidia/xorg/libglx.so

	install -D -m755 libGLX_nvidia.so.${VERSION} /root/bldr-inst/usr/lib/libGLX_nvidia.so.${VERSION}
# now in mesa driver
#ln -s libGLX_nvidia.so.${VERSION} /root/bldr-inst/usr/lib/libGLX_indirect.so.0

# OpenGL libraries
	install -D -m755 libEGL_nvidia.so.${VERSION} /root/bldr-inst/usr/lib/libEGL_nvidia.so.${VERSION}
	install -D -m755 libGLESv1_CM_nvidia.so.${VERSION} /root/bldr-inst/usr/lib/libGLESv1_CM_nvidia.so.${VERSION}
	install -D -m755 libGLESv2_nvidia.so.${VERSION} /root/bldr-inst/usr/lib/libGLESv2_nvidia.so.${VERSION}
	install -D -m644 10_nvidia.json /root/bldr-inst/usr/share/glvnd/egl_vendor.d/10_nvidia.json

# OpenGL core library
	install -D -m755 libnvidia-glcore.so.${VERSION} /root/bldr-inst/usr/lib/libnvidia-glcore.so.${VERSION}
	install -D -m755 libnvidia-eglcore.so.${VERSION} /root/bldr-inst/usr/lib/libnvidia-eglcore.so.${VERSION}
	install -D -m755 libnvidia-glsi.so.${VERSION} /root/bldr-inst/usr/lib/libnvidia-glsi.so.${VERSION}

# misc
	install -D -m755 libnvidia-ifr.so.${VERSION} /root/bldr-inst/usr/lib/libnvidia-ifr.so.${VERSION}
	install -D -m755 libnvidia-fbc.so.${VERSION} /root/bldr-inst/usr/lib/libnvidia-fbc.so.${VERSION}
	install -D -m755 libnvidia-encode.so.${VERSION} /root/bldr-inst/usr/lib/libnvidia-encode.so.${VERSION}
	install -D -m755 libnvidia-cfg.so.${VERSION} /root/bldr-inst/usr/lib/libnvidia-cfg.so.${VERSION}
	install -D -m755 libnvidia-ml.so.${VERSION} /root/bldr-inst/usr/lib/libnvidia-ml.so.${VERSION}
	install -D -m755 libnvidia-wfb.so.${VERSION} /root/bldr-inst/usr/lib/libnvidia-wfb.so.${VERSION}
#	install -D -m755 libnvidia-glvkspirv.so.${VERSION} /root/bldr-inst/usr/lib/libnvidia-glvkspirv.so.${VERSION}

# Vulkan ICD
	install -D -m644 nvidia_icd.json.template /root/bldr-inst/usr/share/vulkan/icd.d/nvidia_icd.json

# VDPAU
	install -D -m755 libvdpau_nvidia.so.${VERSION} /root/bldr-inst/usr/lib/vdpau/libvdpau_nvidia.so.${VERSION}

# nvidia-tls library
	install -D -m755 libnvidia-tls.so.${VERSION} /root/bldr-inst/usr/lib/libnvidia-tls.so.${VERSION}
	install -D -m755 tls/libnvidia-tls.so.${VERSION} /root/bldr-inst/usr/lib/tls/libnvidia-tls.so.${VERSION}

# CUDA
	install -D -m755 libcuda.so.${VERSION} /root/bldr-inst/usr/lib/libcuda.so.${VERSION}
	install -D -m755 libnvcuvid.so.${VERSION} /root/bldr-inst/usr/lib/libnvcuvid.so.${VERSION}

# PTX JIT Compiler (Parallel Thread Execution (PTX) is a pseudo-assembly language for CUDA)
	install -D -m755 libnvidia-ptxjitcompiler.so.${VERSION} /root/bldr-inst/usr/lib/libnvidia-ptxjitcompiler.so.${VERSION}

# Fat (multiarchitecture) binary loader
	install -D -m755 libnvidia-fatbinaryloader.so.${VERSION} /root/bldr-inst/usr/lib/libnvidia-fatbinaryloader.so.${VERSION}

# DEBUG
	install -D -m755 nvidia-debugdump /root/bldr-inst/usr/bin/nvidia-debugdump

# nvidia-xconfig
	install -D -m755 nvidia-xconfig /root/bldr-inst/usr/bin/nvidia-xconfig
	install -D -m644 nvidia-xconfig.1.gz /root/bldr-inst/usr/share/man/man1/nvidia-xconfig.1.gz

# nvidia-bug-report
	install -D -m755 nvidia-bug-report.sh /root/bldr-inst/usr/bin/nvidia-bug-report.sh

# nvidia-smi
	install -D -m755 nvidia-smi /root/bldr-inst/usr/bin/nvidia-smi
	install -D -m644 nvidia-smi.1.gz /root/bldr-inst/usr/share/man/man1/nvidia-smi.1.gz

# nvidia-cuda-mps
	install -D -m755 nvidia-cuda-mps-server /root/bldr-inst/usr/bin/nvidia-cuda-mps-server
	install -D -m755 nvidia-cuda-mps-control /root/bldr-inst/usr/bin/nvidia-cuda-mps-control
	install -D -m644 nvidia-cuda-mps-control.1.gz /root/bldr-inst/usr/share/man/man1/nvidia-cuda-mps-control.1.gz

# nvidia-modprobe
# This should be removed if nvidia fixed their uvm module!
#	install -D -m4755 nvidia-modprobe /root/bldr-inst/usr/bin/nvidia-modprobe
#	install -D -m644 nvidia-modprobe.1.gz /root/bldr-inst/usr/share/man/man1/nvidia-modprobe.1.gz

# nvidia-persistenced
	install -D -m755 nvidia-persistenced /root/bldr-inst/usr/bin/nvidia-persistenced
	install -D -m644 nvidia-persistenced.1.gz /root/bldr-inst/usr/share/man/man1/nvidia-persistenced.1.gz
	install -D -m644 nvidia-persistenced-init/systemd/nvidia-persistenced.service.template /root/bldr-inst/usr/lib/systemd/system/nvidia-persistenced.service
	sed -i 's/__USER__/nvidia-persistenced/' /root/bldr-inst/usr/lib/systemd/system/nvidia-persistenced.service

# application profiles
	install -D -m644 nvidia-application-profiles-${VERSION}-rc /root/bldr-inst/usr/share/nvidia/nvidia-application-profiles-${VERSION}-rc
	install -D -m644 nvidia-application-profiles-${VERSION}-key-documentation /root/bldr-inst/usr/share/nvidia/nvidia-application-profiles-${VERSION}-key-documentation

	mkdir -p /root/bldr-inst/usr/share/doc/nvidia/
	cp -r html /root/bldr-inst/usr/share/doc/nvidia/
	ln -s nvidia /root/bldr-inst/usr/share/doc/nvidia-utils


	#32-bit libs
	mkdir -p /root/bldr-inst/usr/lib32/nvidia
	cd 32

	# OpenGL libraries
    install -D -m755 libEGL_nvidia.so.${VERSION} /root/bldr-inst/usr/lib32/libEGL_nvidia.so.${VERSION}
    install -D -m755 libGLESv1_CM_nvidia.so.${VERSION} /root/bldr-inst/usr/lib32/libGLESv1_CM_nvidia.so.${VERSION}
    install -D -m755 libGLESv2_nvidia.so.${VERSION} /root/bldr-inst/usr/lib32/libGLESv2_nvidia.so.${VERSION}

    # OpenGL core library
    install -D -m755 libnvidia-glcore.so.${VERSION} /root/bldr-inst/usr/lib32/libnvidia-glcore.so.${VERSION}
    install -D -m755 libnvidia-eglcore.so.${VERSION} /root/bldr-inst/usr/lib32/libnvidia-eglcore.so.${VERSION}
    install -D -m755 libnvidia-glsi.so.${VERSION} /root/bldr-inst/usr/lib32/libnvidia-glsi.so.${VERSION}

    # misc
    install -D -m755 libnvidia-ifr.so.${VERSION} /root/bldr-inst/usr/lib32/libnvidia-ifr.so.${VERSION}
    install -D -m755 libnvidia-fbc.so.${VERSION} /root/bldr-inst/usr/lib32/libnvidia-fbc.so.${VERSION}
    install -D -m755 libnvidia-encode.so.${VERSION} /root/bldr-inst/usr/lib32/libnvidia-encode.so.${VERSION}
    install -D -m755 libnvidia-ml.so.${VERSION} /root/bldr-inst/usr/lib32/libnvidia-ml.so.${VERSION}
#    install -D -m755 libnvidia-glvkspirv.so.${VERSION} /root/bldr-inst/usr/lib32/libnvidia-glvkspirv.so.${VERSION}

    # VDPAU
    install -D -m755 libvdpau_nvidia.so.${VERSION} /root/bldr-inst/usr/lib32/vdpau/libvdpau_nvidia.so.${VERSION}

    # nvidia-tls library
    install -D -m755 libnvidia-tls.so.${VERSION} /root/bldr-inst/usr/lib32/libnvidia-tls.so.${VERSION}
    install -D -m755 tls/libnvidia-tls.so.${VERSION} /root/bldr-inst/usr/lib32/tls/libnvidia-tls.so.${VERSION}

    # CUDA
    install -D -m755 libcuda.so.${VERSION} /root/bldr-inst/usr/lib32/libcuda.so.${VERSION}
    install -D -m755 libnvcuvid.so.${VERSION} /root/bldr-inst/usr/lib32/libnvcuvid.so.${VERSION}

    # PTX JIT Compiler (Parallel Thread Execution (PTX) is a pseudo-assembly language for CUDA)
    install -D -m755 libnvidia-ptxjitcompiler.so.${VERSION} /root/bldr-inst/usr/lib32/libnvidia-ptxjitcompiler.so.${VERSION}

    # Fat (multiarchitecture) binary loader
    install -D -m755 libnvidia-fatbinaryloader.so.${VERSION} /root/bldr-inst/usr/lib32/libnvidia-fatbinaryloader.so.${VERSION}

	cd ..


	#Symlinks
	# create soname links, thanks Arch!
    for _lib in $(find /root/bldr-inst -name '*.so*' | grep -v 'xorg/'); do
        _soname=$(dirname "${_lib}")/$(readelf -d "${_lib}" | grep -Po 'SONAME.*: \[\K[^]]*' || true)
        _base=$(echo ${_soname} | sed -r 's/(.*).so.*/\1.so/')
        [[ -e "${_soname}" ]] || ln -s $(basename "${_lib}") "${_soname}"
        [[ -e "${_base}" ]] || ln -s $(basename "${_soname}") "${_base}"
    done	
}

#Default HTTP curl new version detection
function Detect
{
        LATEST=`curl -L -s http://download.nvidia.com/XFree86/Linux-x86_64/latest.txt | awk '{print $1;}'`

        vercomp $VERSION $LATEST
        if [ $? -eq 2 ];
        then
                echo "$NAME: New Version Available! - $LATEST"
        fi
}

