#package name
NAME=midori

#Description
DESC="Lightweight web browser (GTK3)"

#package version
VERSION=0.5.11

#directory locations, 99.99% of the time this is 1
ISUSR=1

#source location (used by wget)
SRC=http://midori-browser.org/downloads/midori_${VERSION}_all_.tar.bz2

#extra parameters to pass to configure (if not ISSPECIAL)
EXTRACONF=

#1 if BuildAndInstall should be called instead of ./configure && make && make install method
BUILD=custom

# build/package dependancies
DEPS=('atk' 'cairo' 'gcr' 'gdk-pixbuf' 'glib2' 'glibc' 'gtk+' 'libX11' 'libXScrnSaver' 'libsoup' 'libxml2' 'p11-kit' 'pango' 'sqlite' 'webkitgtk' 'zeitgeist')

# 'no' to skip calls to strip
STRIP=

#array of deps to add to package (ones that are not automatically picked up by pkgr)
PKGDEPS=

#1 to restore libdb to what it was before pkgr -genmeta is called ( ie. ignore libs )
RESTORELIBDB=

function BuildAndInstall
{
	pkgr -i ninja &> /dev/null

    # The latest release of vala is a bit stricter than the previous one
    sed 's/protected Tally/public Tally/g' -i midori/midori-notebook.vala
    sed 's/%d other files/%u other files/g' -i extensions/transfers.vala
    for f in transfers adblock/widgets apps history-list notes; do
        sed 's/.remove (iter/.remove (ref iter/g' -i "extensions/$f.vala"
    done

	mkdir -p build && cd build
	cmake .. \
	-DCMAKE_INSTALL_PREFIX=/usr \
	-DCMAKE_INSTALL_LIBDIR=lib \
	-DHALF_BRO_INCOM_WEBKIT2=ON \
	-DCMAKE_C_FLAGS="$CFLAGS -w" \
	-G Ninja
	ninja
	DESTDIR=/root/bldr-inst ninja install
}

#Default HTTP curl new version detection
function Detect
{
        LISTURL=http://midori-browser.org/download/source/
        FILELIST=`GetFileList`
        LATEST=0

        for i in ${FILELIST[@]};
        do
                        CURVER=`echo $i | sed -e 's/'"${NAME}"'-//g; s/.tar.*//g'`
                        vercomp $LATEST $CURVER
                        if [ $? -eq 2 ];
                        then
                                        LATEST=$CURVER
                        fi
        done

        vercomp $VERSION $LATEST
        if [ $? -eq 2 ];
        then
                        echo "$NAME: New Version Available! - $LATEST"
        fi
}
