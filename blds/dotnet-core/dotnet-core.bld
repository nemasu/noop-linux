#package name
NAME=dotnet-core

#Description
DESC="The .NET Core runtime and sdk."

#package version
VERSION=2.2.3

#directory locations, 99.99% of the time this is 1
ISUSR=1

#source location (used by wget)
SRC=

#extra parameters to pass to configure (if not ISSPECIAL)
EXTRACONF=

#autotools, python, perl, cmake, custom
BUILD=custom

# build/package dependancies
DEPS=

# 'no' to skip calls to strip
STRIP=

#array of deps to add to package (ones that are not automatically picked up by pkgr)
PKGDEPS=

#1 to restore libdb to what it was before pkgr -genmeta is called ( ie. ignore libs )
RESTORELIBDB=

function BuildAndInstall
{
    if [ -z "$BLDR_CONTINUE" ]; then
        git clone --recursive https://github.com/dotnet/source-build.git
        cd source-build
        git checkout v${VERSION}
        cd ..
    fi

    cd source-build

	for submodule in src/{application-insights,aspnet-razor,cli,cli-migrate,clicommandlineparser,common,core-setup,coreclr,corefx,fsharp,linker,msbuild,newtonsoft-json,nuget-client,roslyn,roslyn-tools,sdk,standard,templating,vstest,websdk,xliff-tasks}; do
		git submodule init ${submodule}
		git submodule update
	done

	cd src/linker

	for submodule in cecil; do
		git submodule init ${submodule}
		git submodule update
	done

	cd ../../

    export PKG_CONFIG_PATH='/usr/lib/openssl-1.0/pkgconfig'
    export SOURCE_BUILD_SKIP_SUBMODULE_CHECK=1
    ./build.sh

    #TODO finish this if it ever builds
}

function Detect() {
    LISTURL=
    FILELIST=`GetFileList`
    LATEST=0

    for i in ${FILELIST[@]};
    do
        CURVER=`echo $i | sed -e 's/'"${NAME}"'-//g; s/.tar.*//g'`
        vercomp $LATEST $CURVER
        if [ $? -eq 2 ];
        then
                        LATEST=$CURVER
        fi
    done

    vercomp $VERSION $LATEST
    if [ $? -eq 2 ];
    then
        echo "$NAME: New Version Available! - $LATEST"
    fi
}
