From 89ffec4a7690c590ad48821ed023d3e3cedf67f0 Mon Sep 17 00:00:00 2001
From: fujiwarat <takao.fujiwara1@gmail.com>
Date: Fri, 26 Jun 2015 14:48:51 +0900
Subject: [PATCH] Enable preedit text

---
 src/display.c     | 97 ++++++++++++++++++++++++++++++++++++++++++++++++++++---
 src/ibus-fbterm.c | 69 +++++++++++++++++++++++++++++++--------
 2 files changed, 148 insertions(+), 18 deletions(-)

diff --git a/src/display.c b/src/display.c
index d9d90af..4789a44 100644
--- a/src/display.c
+++ b/src/display.c
@@ -1,7 +1,7 @@
-enum { AuxiliaryTextWin = 0, LookupTableWin, StatusBarWin };
+enum { AuxiliaryTextWin = 0, LookupTableWin, StatusBarWin, PreeditTextWin };
 
 static unsigned short cursor_x, cursor_y;
-static Rectangle auxiliary_text_win, lookup_table_win, status_bar_win;
+static Rectangle auxiliary_text_win, lookup_table_win, status_bar_win, preedit_text_win;
 
 static Info info;
 
@@ -128,7 +128,10 @@ static void calculate_lookup_win()
 	}
 
 	lookup_table_win.x = cursor_x;
-	lookup_table_win.y = get_cursor_y() + WIN_INTERVAL + GAP;
+	if (preedit_text_win.w)
+		lookup_table_win.y = get_cursor_y() + 2 * WIN_INTERVAL + GAP;
+	else
+		lookup_table_win.y = get_cursor_y() + WIN_INTERVAL + GAP;
 	lookup_table_win.w = FW(w + 3 * lookup_table->page_size) + 2 * MARGIN;
 	lookup_table_win.h = WIN_HEIGHT;
 
@@ -179,7 +182,10 @@ static void calculate_auxiliary_win()
 	}
 
 	auxiliary_text_win.x = cursor_x;
-	auxiliary_text_win.y = get_cursor_y() + GAP;
+	if (preedit_text_win.w)
+		auxiliary_text_win.y = get_cursor_y() + WIN_INTERVAL + GAP;
+	else
+		auxiliary_text_win.y = get_cursor_y() + GAP;
 	auxiliary_text_win.w = FW(text_width(auxiliary_text->text)) + 2 * MARGIN;
 	auxiliary_text_win.h = WIN_HEIGHT;
 
@@ -258,3 +264,86 @@ static void draw_status_bar()
 		x += FW(1);
 	}
 }
+
+static void calculate_preedit_win()
+{
+	if (!preedit_text) {
+		preedit_text_win.w = 0;
+		return;
+	}
+
+	preedit_text_win.x = cursor_x;
+	preedit_text_win.y = get_cursor_y() + GAP;
+	preedit_text_win.w = FW(text_width(preedit_text->text)) + 2 * MARGIN;
+	preedit_text_win.h = WIN_HEIGHT;
+
+	if (preedit_text_win.x + preedit_text_win.w > SW) {
+		if (preedit_text_win.w > SW) preedit_text_win.x = 0;
+		else preedit_text_win.x = SW - preedit_text_win.w;
+	}
+}
+
+static void draw_preedit_text()
+{
+	IBusAttribute *attr;
+	unsigned i, w = 0;
+	guint start_index = G_MAXUINT;
+	guint end_index = G_MAXUINT;
+
+	set_im_window(PreeditTextWin, preedit_text_win);
+	if (!preedit_text_win.w) return;
+
+	draw_margin(preedit_text_win, COLOR_BG);
+
+	if (preedit_text->attrs != 0)
+		for (i = 0; ; i++) {
+			attr = ibus_attr_list_get(preedit_text->attrs, i);
+			if (attr == 0)
+				break;
+			if (attr->type == IBUS_ATTR_TYPE_BACKGROUND) {
+				if ((attr->value & 0x00ffffff) > 0) {
+					start_index = attr->start_index;
+					end_index = attr->end_index;
+					break;
+				}
+			}
+		}
+
+	set_im_window(PreeditTextWin, preedit_text_win);
+	unsigned x = preedit_text_win.x + MARGIN, y = preedit_text_win.y + MARGIN;
+	if (start_index != G_MAXUINT && end_index > start_index) {
+		char *start_text;
+		char *end_text;
+		char *segment;
+		guint length;
+		if (start_index > 0) {
+			start_text = preedit_text->text;
+			end_text = g_utf8_offset_to_pointer(preedit_text->text,
+			                                    start_index);
+			length = end_text - start_text;
+			draw_text(x, y, COLOR_FG, COLOR_BG, start_text, length);
+			segment = g_strndup(start_text, length);
+			x += FW(text_width(segment));
+			g_free(segment);
+		}
+		start_text = g_utf8_offset_to_pointer (preedit_text->text,
+		                                      start_index);
+		end_text = g_utf8_offset_to_pointer(preedit_text->text,
+		                                    end_index);
+		length = end_text - start_text;
+		draw_text(x, y, COLOR_ACTIVE_CANDIDATE, COLOR_BG, start_text, length);
+		segment = g_strndup(start_text, length);
+		x += FW(text_width(segment));
+		g_free(segment);
+
+		start_text = g_utf8_offset_to_pointer(preedit_text->text,
+		                                      end_index);
+		end_text = preedit_text->text + strlen(preedit_text->text);
+		length = end_text - start_text;
+		if (length > 0)
+			draw_text(x, y, COLOR_FG, COLOR_BG, start_text, length);
+	} else {
+		draw_text(x, y, COLOR_FG, COLOR_BG,
+		          preedit_text->text, strlen(preedit_text->text));
+	}
+}
diff --git a/src/ibus-fbterm.c b/src/ibus-fbterm.c
index 7b6b604..3719594 100644
--- a/src/ibus-fbterm.c
+++ b/src/ibus-fbterm.c
@@ -7,6 +7,7 @@
 #include "keycode.h"
 
 static IBusText *auxiliary_text;
+static IBusText *preedit_text;
 static IBusLookupTable *lookup_table;
 static IBusPropList *property_list;
 
@@ -41,12 +42,18 @@ static void slot_hide_lookup_table(IBusInputContext *ctx, gpointer data)
 static void slot_update_lookup_table(IBusInputContext *ctx, IBusLookupTable *table, gboolean visible, gpointer data)
 {
 	debug("update lookup table\n");
-	if (!visible) return;
 
-	if (lookup_table) g_object_unref(lookup_table);
+	if (lookup_table) {
+		g_object_unref(lookup_table);
+		lookup_table = 0;
+	}
 
-	lookup_table = table;
-	g_object_ref(table);
+	if (visible) {
+		lookup_table = table;
+		g_object_ref(table);
+	} else {
+		lookup_table_win.w = 0;
+	}
 
 	calculate_lookup_win();
 	draw_lookup_table();
@@ -67,30 +74,58 @@ static void slot_hide_auxiliary_text(IBusInputContext *ctx, gpointer data)
 static void slot_update_auxiliary_text(IBusInputContext *ctx, IBusText *text, gboolean visible, gpointer data)
 {
 	debug("update auxiliary text: %s\n", text->text);
-	if (!visible) return;
 
-	if (auxiliary_text) g_object_unref(auxiliary_text);
+	if (auxiliary_text) {
+		g_object_unref(auxiliary_text);
+		auxiliary_text = 0;
+	}
 
-	auxiliary_text = text;
-	g_object_ref(text);
+	if (visible) {
+		auxiliary_text = text;
+		g_object_ref(text);
+	} else {
+		auxiliary_text_win.w = 0;
+	}
 
 	calculate_auxiliary_win();
 	draw_auxiliary_text();
 }
 
-/*
 static void slot_show_preedit_text(IBusInputContext *ctx, gpointer data)
 {
 }
 
 static void slot_hide_preedit_text(IBusInputContext *ctx, gpointer data)
 {
+	debug("hide preedit text\n");
+	if (preedit_text) {
+		g_object_unref(preedit_text);
+		preedit_text = 0;
+	}
+
+	calculate_preedit_win();
+	draw_preedit_text();
 }
 
 static void slot_update_preedit_text(IBusInputContext *ctx, IBusText *text, guint cursor_pos, gboolean visible, gpointer data)
 {
+	debug("update preedit text: %s\n", text->text);
+
+	if (preedit_text) {
+		g_object_unref(preedit_text);
+		preedit_text = 0;
+	}
+
+	if (visible) {
+		preedit_text = text;
+		g_object_ref(text);
+	} else {
+		preedit_text_win.w = 0;
+	}
+
+	calculate_preedit_win();
+	draw_preedit_text();
 }
-*/
 
 static void slot_register_properties(IBusInputContext *ctx, IBusPropList *props, gpointer data)
 {
@@ -131,10 +166,12 @@ static void im_deactive()
 	ibus_input_context_disable(ibus_ctx);
 #endif
 
+	preedit_text_win.w = 0;
 	auxiliary_text_win.w = 0;
 	lookup_table_win.w = 0;
 	status_bar_win.w = 0;
 
+	draw_preedit_text();
 	draw_auxiliary_text();
 	draw_lookup_table();
 	draw_status_bar();
@@ -172,6 +209,7 @@ static void process_key(char *buf, unsigned len)
 
 static void im_show(unsigned winid)
 {
+	if (winid == (unsigned)-1 || winid == PreeditTextWin) draw_preedit_text();
 	if (winid == (unsigned)-1 || winid == AuxiliaryTextWin) draw_auxiliary_text();
 	if (winid == (unsigned)-1 || winid == LookupTableWin) draw_lookup_table();
 	if (winid == (unsigned)-1 || winid == StatusBarWin) draw_status_bar();
@@ -187,10 +225,12 @@ static void cursor_pos_changed(unsigned x, unsigned y)
 	cursor_y = y;
 
 	calculate_lookup_win();
+	calculate_preedit_win();
 	calculate_auxiliary_win();
 	calculate_status_win();
 
 	draw_lookup_table();
+	draw_preedit_text();
 	draw_auxiliary_text();
 	draw_status_bar();
 }
@@ -238,14 +278,14 @@ int main()
 					 "signal::update-lookup-table", slot_update_lookup_table, NULL,
 					 "signal::hide-auxiliary-text", slot_hide_auxiliary_text, NULL,
 					 "signal::update-auxiliary-text", slot_update_auxiliary_text, NULL,
-//					 "signal::show-preedit-text", slot_show_preedit_text, NULL,
-//					 "signal::hide-preedit-text", slot_hide_preedit_text, NULL,
-//					 "signal::update-preedit-text", slot_update_preedit_text, NULL,
+					 "signal::show-preedit-text", slot_show_preedit_text, NULL,
+					 "signal::hide-preedit-text", slot_hide_preedit_text, NULL,
+					 "signal::update-preedit-text", slot_update_preedit_text, NULL,
 					 "signal::register-properties", slot_register_properties, NULL,
 					 "signal::update-property", slot_update_property, NULL,
 					 NULL);
 #if IBUS_CHECK_VERSION (1, 4, 99)
-	ibus_input_context_set_capabilities(ibus_ctx, IBUS_CAP_AUXILIARY_TEXT | IBUS_CAP_LOOKUP_TABLE | IBUS_CAP_PROPERTY | IBUS_CAP_FOCUS);
+	ibus_input_context_set_capabilities(ibus_ctx, IBUS_CAP_AUXILIARY_TEXT | IBUS_CAP_LOOKUP_TABLE | IBUS_CAP_PROPERTY | IBUS_CAP_FOCUS | IBUS_CAP_PREEDIT_TEXT);
 #else
 	ibus_input_context_set_capabilities(ibus_ctx, IBUS_CAP_AUXILIARY_TEXT | IBUS_CAP_LOOKUP_TABLE | IBUS_CAP_PROPERTY);
 #endif
@@ -257,6 +297,7 @@ int main()
 	g_main_loop_run(main_loop);
 
 	if (auxiliary_text) g_object_unref(auxiliary_text);
+	if (preedit_text) g_object_unref(preedit_text);
 	if (lookup_table) g_object_unref(lookup_table);
 	if (property_list) g_object_unref(property_list);
 
