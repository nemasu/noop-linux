#package name
NAME=clementine

#Description
DESC="A modern music player and library organizer"

#package version
VERSION=1.3.1
DVERSION=1.3.1

#directory locations, 99.99% of the time this is 1
ISUSR=1

#source location (used by wget)
SRC="https://github.com/clementine-player/Clementine/archive/${DVERSION}.tar.gz"

#extra parameters to pass to configure (if not ISSPECIAL)
EXTRACONF=

#1 if BuildAndInstall should be called instead of ./configure && make && make install method
BUILD=custom

# build/package dependancies
DEPS=('chromaprint' 'crypto++' 'fftw' 'gcc-libs' 'gdk-pixbuf' 'glew' 'glib2' 'glibc' 'gst-plugins-base' 'gstreamer' 'libX11' 'libcdio' 'libechonest' 'libglu' 'libgpod' 'libimobiledevice' 'liblastfm' 'libmtp' 'libplist' 'libusb' 'mesalib' 'openssl' 'protobuf' 'pulseaudio' 'qjson' 'qt4' 'sqlite' 'taglib' 'usbmuxd' 'zlib')

# 'no' to skip calls to strip
STRIP=

#array of deps to add to package (ones that are not automatically picked up by pkgr)
PKGDEPS=

#1 to restore libdb to what it was before pkgr -genmeta is called ( ie. ignore libs )
RESTORELIBDB=

function BuildAndInstall
{

        for i in sparsehash boost; do
                if [ ! -e /var/noop/installed/$i ];
                then
                        echo "You need $i to build $NAME";
                        exit 1
                fi
        done

        mkdir -p build && cd build
        cmake .. \
                -DCMAKE_INSTALL_PREFIX='/usr' \
                -DCMAKE_BUILD_TYPE='Release'
        make -j${BLDR_CORES}
        make DESTDIR=/root/bldr-inst install
}

#Default HTTP curl new version detection
function Detect
{
        LISTURL=https://github.com/clementine-player/Clementine/releases
        FILELIST=`GetFileList`
        LATEST=0

        for i in ${FILELIST[@]};
        do
                        CURVER=`echo $i | sed -e 's/'"${NAME}"'-//g; s/.tar.*//g'`
                        vercomp $LATEST $CURVER
                        if [ $? -eq 2 ];
                        then
                                        LATEST=$CURVER
                        fi
        done

        vercomp $DVERSION $LATEST
        if [ $? -eq 2 ];
        then
                        echo "$NAME: New Version Available! - $LATEST"
        fi
}

